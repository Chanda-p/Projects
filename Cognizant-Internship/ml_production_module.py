# -*- coding: utf-8 -*-
"""ml_production_module.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yREIvjVp1kcTUTibTQ-vCnagOI0yi6Kj
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import StandardScaler

K = 10  # Number of cross-validation folds
SPLIT = 0.75  # Train-test split ratio

# Load data
def load_data(path: str):
    df = pd.read_csv(path)
    df.drop(columns=["Unnamed: 0"], inplace=True, errors='ignore')
    return df

# Create target variable and predictor variables
def create_target_and_predictors(data: pd.DataFrame, target: str):
    if target not in data.columns:
        raise Exception(f"Target: {target} is not present in the data")

    X = data.drop(columns=[target])
    y = data[target]
    return X, y

# Train algorithm
def train_algorithm_with_cross_validation(X: pd.DataFrame, y: pd.Series):
    accuracy = []

    for fold in range(K):
        model = RandomForestRegressor()
        scaler = StandardScaler()

        X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=SPLIT, random_state=42)

        scaler.fit(X_train)
        X_train = scaler.transform(X_train)
        X_test = scaler.transform(X_test)

        trained_model = model.fit(X_train, y_train)

        y_pred = trained_model.predict(X_test)

        mae = mean_absolute_error(y_true=y_test, y_pred=y_pred)
        accuracy.append(mae)
        print(f"Fold {fold + 1}: MAE = {mae:.3f}")

    avg_mae = sum(accuracy) / len(accuracy)
    print(f"Average MAE: {avg_mae:.2f}")

if __name__ == "__main__":
    data_path = "/path/to/csv/sales.csv"
    target_column = "estimated_stock_pct"

    data = load_data(data_path)
    X, y = create_target_and_predictors(data, target_column)

    train_algorithm_with_cross_validation(X, y)